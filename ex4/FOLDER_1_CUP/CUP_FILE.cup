/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;
	public Parser(Lexer lexer){
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("(");
		System.out.print(s.value);
		System.out.print(")");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;

terminal TYPE_STRING;
terminal TYPE_INT;
terminal TYPE_VOID;
terminal GT;
terminal LT;
terminal ARRAY;
terminal NEW;
terminal CLASS;
terminal RETURN;
terminal EXTENDS;
terminal COMMA;
terminal NIL;


/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_ARG arg;
non terminal AST_CFIELD cField;
non terminal AST_NEW_EXP newExp;


non terminal AST_STMT_LIST stmtList;
non terminal AST_ARG_LIST argList;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_EXP_LIST expList;

non terminal AST_PROGRAM Program;
non terminal AST_DEC dec;
non terminal AST_DEC_ARRAY_TYPEDEF arrayTypedefDec;
non terminal AST_DEC_CLASS classDec;
non terminal AST_DEC_VAR varDec;
non terminal AST_DEC_FUNC funcDec;
non terminal AST_TYPE type;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left EQ;
precedence left LT;
precedence left GT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;

/************************/
/* START WITH: Program  */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/
Program	::=
			dec:d	Program:p		{: RESULT = new AST_PROGRAM(dleft, d,p);    :}
    | dec:d 						{: RESULT = new AST_PROGRAM(dleft, d,null); :}
		;

dec	::=
			ARRAY ID:name EQ type:t LBRACK RBRACK SEMICOLON 									{: RESULT = new AST_DEC_ARRAY_TYPEDEF(tleft, t, name); :}
		|	type:t ID:varName ASSIGN exp:e SEMICOLON 													{: RESULT = new AST_DEC_VAR(tleft, t, varName, e); :}
		| type:t ID:varName SEMICOLON 																			{: RESULT = new AST_DEC_VAR(tleft, t, varName, null); :}
		| type:t ID:varName ASSIGN newExp:e SEMICOLON 											{: RESULT = new AST_DEC_VAR(tleft, t, varName, e); :}
		| type:t ID:name LPAREN RPAREN LBRACE stmtList:sl RBRACE 						{: RESULT = new AST_DEC_FUNC(tleft, t, name, null, sl); :}
		| type:t ID:name LPAREN argList:al RPAREN LBRACE stmtList:sl RBRACE {: RESULT = new AST_DEC_FUNC(tleft, t, name, al, sl); :}
		| CLASS ID:cName EXTENDS ID:eClass LBRACE cFieldList:cfl RBRACE 		{: RESULT = new AST_DEC_CLASS(cNameleft, cName, eClass, cfl); :}
		| CLASS ID:cName LBRACE cFieldList:cfl RBRACE 											{: RESULT = new AST_DEC_CLASS(cNameleft, cName, null, cfl); :}
		;

type ::=
		  TYPE_INT 		{: RESULT = new AST_TYPE("int"); :}
		| TYPE_STRING {: RESULT = new AST_TYPE("string"); :}
		| TYPE_VOID 	{: RESULT = new AST_TYPE("void"); :}
		| ID:t 				{: RESULT = new AST_TYPE(t); :}
		;


stmtList	::=		
			stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(sleft, s,l);    :}
		| stmt:s								{: RESULT = new AST_STMT_LIST(sleft, s,null); :}
		;

argList	::=
			arg:a COMMA argList:l		{: RESULT = new AST_ARG_LIST(aleft, a,l);    :}
		| arg:a										{: RESULT = new AST_ARG_LIST(aleft, a,null); :}
		;

expList	::=
			exp:e COMMA expList:l		{: RESULT = new AST_EXP_LIST(eleft, e,l);    :}
		| exp:e										{: RESULT = new AST_EXP_LIST(eleft, e,null); :}
		;

cFieldList	::=		
			cField:cf cFieldList:l		{: RESULT = new AST_CFIELD_LIST(cfleft, cf, l);    :}
		| cField:cf									{: RESULT = new AST_CFIELD_LIST(cfleft, cf, null); :}
		;

var	::=		
			ID:name											{: RESULT = new AST_VAR_SIMPLE(nameleft, name);       :}
		| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(vleft, v,fieldName); :} 
		| var:v LBRACK exp:e RBRACK		{: RESULT = new AST_VAR_SUBSCRIPT(vleft, v,e);     :} 
		;

cField ::=
		type:t ID:varName ASSIGN exp:e SEMICOLON 	    				        {: RESULT = new AST_CFIELD_DEC_VAR(tleft, t, varName, e); :}
		| type:t ID:varName SEMICOLON 										    {: RESULT = new AST_CFIELD_DEC_VAR(tleft, t, varName, null); :}
		| type:t ID:varName ASSIGN newExp:e SEMICOLON 							{: RESULT = new AST_CFIELD_DEC_VAR(tleft, t, varName, e); :}
		| type:t ID:varName LPAREN RPAREN LBRACE stmtList:sl RBRACE 			{: RESULT = new AST_CFIELD_DEC_FUNC(tleft, t, varName, null, sl); :}
		| type:t ID:varName LPAREN argList:al RPAREN LBRACE stmtList:sl RBRACE 	{: RESULT = new AST_CFIELD_DEC_FUNC(tleft, t, varName, al, sl); :}
		;


stmt	::=
			type:t ID:varName ASSIGN exp:e SEMICOLON 									{: RESULT = new AST_STMT_DEC_VAR(tleft, t, varName, e); :}
		| type:t ID:varName SEMICOLON 															{: RESULT = new AST_STMT_DEC_VAR(tleft, t, varName, null); :}
		| type:t ID:varName ASSIGN newExp:e SEMICOLON 							{: RESULT = new AST_STMT_DEC_VAR(tleft, t, varName, e); :}
    | var:v ASSIGN exp:e SEMICOLON			 												{: RESULT = new AST_STMT_ASSIGN(vleft, v,e); :}
		| var:v ASSIGN newExp:e SEMICOLON														{: RESULT = new AST_STMT_ASSIGN(vleft, v,e); :}
		| IF LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{:RESULT = new AST_STMT_IF(condleft, cond,body);:}
		| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(condleft, cond,body); :}
		| RETURN exp:e SEMICOLON 																		{: RESULT = new AST_STMT_RETURN(eleft, e); :}
		| RETURN SEMICOLON 																					{: RESULT = new AST_STMT_RETURN(0, null); :}
		| var:v DOT ID:fname LPAREN expList:args RPAREN SEMICOLON 	{: RESULT = new AST_STMT_FUNCCALL(vleft, fname, v, args);:}
		| var:v DOT ID:fname LPAREN RPAREN SEMICOLON 								{: RESULT = new AST_STMT_FUNCCALL(vleft, fname, v, null);:}
		| ID:fname LPAREN expList:args RPAREN SEMICOLON 						{: RESULT = new AST_STMT_FUNCCALL(fnameleft, fname, null, args);:}
		| ID:fname LPAREN RPAREN SEMICOLON 													{: RESULT = new AST_STMT_FUNCCALL(fnameleft, fname, null, null);:}
		;

exp	::=

		LPAREN exp:e RPAREN															{: RESULT = new AST_PAREN_EXP(eleft, e); :}
		| INT:i																					{: RESULT = new AST_EXP_INT(ileft, i); :}
		| MINUS INT:i																		{: RESULT = new AST_EXP_INT(ileft, -i); :}
		| NIL 																					{: RESULT = new AST_EXP_NIL(); :}
		| STRING:s						    											{: RESULT = new AST_EXP_STRING(sleft, s);       :}
		| var:v																					{: RESULT = new AST_EXP_VAR(vleft, v);          :}
		| exp:e1 PLUS  exp:e2														{: RESULT = new AST_EXP_BINOP(e1left, e1, e2, 0);:}
		| exp:e1 MINUS exp:e2														{: RESULT = new AST_EXP_BINOP(e1left, e1, e2, 1);:}
		| exp:e1 TIMES exp:e2														{: RESULT = new AST_EXP_BINOP(e1left, e1, e2, 2);:}
		| exp:e1 DIVIDE exp:e2													{: RESULT = new AST_EXP_BINOP(e1left, e1, e2, 3);:}
		| exp:e1 LT exp:e2															{: RESULT = new AST_EXP_BINOP(e1left, e1, e2, 4);:}
		| exp:e1 GT exp:e2															{: RESULT = new AST_EXP_BINOP(e1left, e1, e2, 5);:}
		| exp:e1 EQ exp:e2															{: RESULT = new AST_EXP_BINOP(e1left, e1, e2, 6);:}
		| var:v DOT ID:fname LPAREN expList:args RPAREN {: RESULT = new AST_EXP_FUNCCALL(vleft, fname, v, args);:}
		| var:v DOT ID:fname LPAREN RPAREN 							{: RESULT = new AST_EXP_FUNCCALL(vleft, fname, v, null);:}
		| ID:fname LPAREN expList:args RPAREN 					{: RESULT = new AST_EXP_FUNCCALL(fnameleft, fname, null, args);:}
		| ID:fname LPAREN RPAREN 												{: RESULT = new AST_EXP_FUNCCALL(fnameleft, fname, null, null);:}
		;

newExp ::=
			NEW type:t 											{: RESULT = new AST_NEW_EXP(tleft, t, null);:}
		| NEW type:t LBRACK exp:e RBRACK 	{: RESULT = new AST_NEW_EXP(tleft, t, e);:}
		;

arg ::= type:t ID:name {: RESULT = new AST_ARG(tleft, t, name); :};
